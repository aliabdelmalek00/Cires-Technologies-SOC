---
- name: Deploy Kubernetes Cluster
  hosts: all
  become: yes
  tasks:
    - name: Ensure swap is off
      command: swapoff -a

    - name: Disable swap permanently
      replace:
        path: /etc/fstab
        regexp: '(^.*swap.*$)'
        replace: '# \1'

    - name: Install required packages
      apt:
        name: "{{ item }}"
        state: present
        update_cache: yes
      loop:
        - apt-transport-https
        - ca-certificates
        - curl
        - gnupg
        - lsb-release

    # ---------------- Docker Installation ----------------
    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_lsb.codename }} stable"
        state: present

    - name: Install Docker CE
      apt:
        name: docker-ce
        state: present
        update_cache: yes

    - name: Enable and start Docker
      systemd:
        name: docker
        state: started
        enabled: yes

    # ---------------- Kubernetes Installation ----------------
    - name: Add Kubernetes apt repository GPG key
      apt_key:
        url: https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key
        state: present

    - name: Add Kubernetes apt repository
      apt_repository:
        repo: "deb https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /"
        state: present
        filename: kubernetes

    - name: Install Kubeadm, Kubelet, Kubectl
      apt:
        name:
          - kubelet
          - kubeadm
          - kubectl
        state: present
        update_cache: yes

    - name: Hold kubelet, kubeadm, kubectl at current version
      command: apt-mark hold kubelet kubeadm kubectl

# ---------------- Control Plane Init ----------------
- name: Initialize Control Plane
  hosts: control_plane
  become: yes
  tasks:
    - name: kubeadm init on first master only
      command: kubeadm init --apiserver-advertise-address={{ ansible_host }} --pod-network-cidr=10.244.0.0/16
      when: inventory_hostname == groups['control_plane'][0]

    - name: Get join command
      command: kubeadm token create --print-join-command
      register: join_cmd
      when: inventory_hostname == groups['control_plane'][0]

    - name: Save join command to a global fact
      set_fact:
        kube_join_command: "{{ join_cmd.stdout }}"
      when: inventory_hostname == groups['control_plane'][0]
      run_once: true


# ---------------- Worker Join ----------------
- name: Join Worker Nodes
  hosts: workers
  become: yes
  tasks:
    - name: Join cluster
      command: "{{ hostvars[groups['control_plane'][0]].kube_join_command }}"

